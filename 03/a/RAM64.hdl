// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    /* decide whether to actually load the new value (in) or the value already in the register (out) */
    Mux16(a=curVal, b=in, sel=load, out=nextVal);

    /* choose which RAM8 to use based on 3 MSBs of address */
    DMux8Way(in=true, sel=address[3..5], a=load0, b=load1, c=load2, d=load3, e=load4, f=load5, g=load6, h=load7);
    RAM8(in=nextVal, load=load0, address=address[0..2], out=out0);
    RAM8(in=nextVal, load=load1, address=address[0..2], out=out1);
    RAM8(in=nextVal, load=load2, address=address[0..2], out=out2);
    RAM8(in=nextVal, load=load3, address=address[0..2], out=out3);
    RAM8(in=nextVal, load=load4, address=address[0..2], out=out4);
    RAM8(in=nextVal, load=load5, address=address[0..2], out=out5);
    RAM8(in=nextVal, load=load6, address=address[0..2], out=out6);
    RAM8(in=nextVal, load=load7, address=address[0..2], out=out7);

    /* choose which RAM8 to output based on 3 MSBs of address */
    Mux8Way16(sel=address[3..5], a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, out=curVal, out=out);
}
